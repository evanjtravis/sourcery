echo -e "\t${SOURCES}/all/bashrc"
#####################################################################
# Temporary Variables
#####################################################################
declare -a errors=()
declare -a path_duplicates=()
declare -a path_nonexistent=()
declare -a py_path_duplicates=()
declare -a py_path_nonexistent=()

SDIR=/services
SDG=/usr/local/sdg

USR=${SOURCES}/user
SU=${SOURCES}/service-user

USRrc=${USR}/bashrc
SUrc=${SU}/bashrc


#####################################################################
# Functions
#####################################################################
export PATH=/usr/local/bin:/bin:/usr/bin
export PYTHONPATH=

# Add a non-null error to the errors array
add_error(){
    local ERROR=$1
    if [ -n "$ERROR" ]; then
        errors=(${errors[@]} $ERROR)
    fi
}

# Only add to the PATH if it exists and if it is not already a member of
# PATH
add_to_path(){
    local DIRECTORY=$1
    if [ -d "$DIRECTORY" ]; then
        if [[ ":$PATH:" != *":$DIRECTORY:"* ]]; then
            PATH="${PATH:+"$PATH:"}$DIRECTORY"
        else
            path_duplicates=(${path_duplicates[@]} $DIRECTORY)
        fi
    else
        path_nonexistent=(${path_nonexistent[@]} $DIRECTORY)
    fi
}

# Only add to the pythonpath if it exists and if it is not already a member
# of PYTHONPATH
add_to_pythonpath(){
    local DIRECTORY=$1
    if [ -d "$DIRECTORY" ]; then
        if [[ ":$PYTHONPATH:" != *":$DIRECTORY:"* ]]; then
        PYTHONPATH="${PYTHONPATH:+"$PYTHONPATH:"}$DIRECTORY"
        else
            py_path_duplicates=(${py_path_duplicates[@]} $DIRECTORY)
        fi
    else
        py_path_nonexistent=(${py_path_nonexistent[@]} $DIRECTORY)
    fi
}

# Retrieve the indented contents of a list w/o -e argument
indent_list(){
    local LIST=$1
    for i in ${LIST[*]}
    do
        echo "\t${i}"
    done
}

# Print contents of a list
print_list(){
    local LIST=$1
    for i in ${LIST[*]}
    do
        echo -e "${i}"
    done
}

#####################################################################
# Environment Variables
#####################################################################

# Check for /usr/local/sdg symlink to /services/<service>/sdg
if [ -d "$SDG" ]; then
    add_to_path $SDG/share/python/django/bin
    
    add_to_pythonpath $SDG/share/python/django
    add_to_pythonpath $SDG/share/python
else
    # Add /services/<service>/sdg to paths
    if [ -d "$SDIR" ]; then
        add_error "$SDG symlink not detected."
        export SERVICE=$(python ${PYINIT}/get_service.py)
        if [ -d "${SDIR}/${SERVICE}" ]; then
            add_to_path ${SDIR}/${SERVICE}/sdg/share/python/django/bin
        
            add_to_pythonpath ${SDIR}/${SERVICE}/sdg/share/python/django
            add_to_pythonpath ${SDIR}/${SERVICE}/share/python
        else
            add_error "Unrecognized service: $SERVICE."
        fi
    fi
fi

export LS_COLORS='di=36'
export MYLIBS=${SETTINGS}/mylibs
export MYPYLIB=${MYLIBS}/pylib
export MYBASHLIB=${MYLIBS}/bashlib
export PYTHONSTARTUP=${MYPYLIB}/pythonstartup.py
export VIMRC=${MYHOME}/.vimrc

add_to_path ${SETTINGS}
add_to_path ${MYBASHLIB}

add_to_pythonpath ${MYPYLIB}
add_to_pythonpath /usr/lib/python2.6/site-packages
add_to_pythonpath /usr/lib64/python2.6/site-packages

#####################################################################
# Aliases
#####################################################################

alias c="clear"
alias djtest="python manage.py test"
alias ls="ls --group-directories-first --color=auto"
alias sourcery="source ${MYHOME}/.bash_profile"

######################################################################
# Additional Sources
######################################################################

if [ "$MYNAME" == "$USER" ]; then
    source ${USRrc}
else
    source ${SUrc}
fi

#####################################################################
# Gather up and print errors
#####################################################################

if [ ${#path_nonexistent[*]} -ne 0 ]; then
    err="PATH:_NONEXISTENT_DIRECTORIES:\n$(indent_list $path_nonexistent)"
    add_error $err
fi
if [ ${#path_duplicates[*]} -ne 0 ]; then
    err="PATH:_DUPLICATE_DIRECTORIES:\n$(indent_list $path_duplicates)"
    add_error $err
fi
if [ ${#py_path_nonexistent[*]} -ne 0 ]; then
    err="PYTHONPATH:_NONEXISTENT_DIRECTORIES:\n$(indent_list $py_path_nonexistent)"
    add_error $err
fi
if [ ${#py_path_duplicates[*]} -ne 0 ]; then
    err="PYTHONPATH:_DUPLICATE_DIRECTORIES:\n$(indent_list $py_path_duplicates)"
    add_error $err
fi

if [ ${#errors[*]} -ne 0 ]; then
    echo "***[SOURCERY ERRORS]***"
    print_list $errors
fi
