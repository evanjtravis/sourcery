let user=$USER
let myname=$MYNAME
set nocompatible           " be iMproved, required
set nocp
if user == myname
    """"""""""""""""""""""""""""""""""""""
    " Install plugins for vim using VUNDLE
    """"""""""""""""""""""""""""""""""""""
    filetype off                " required
    " Set the runtime path to include Vundle, then initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    
    " Let Vundle manage Vundle, required
    Plugin 'gmarik/Vundle.vim'
    
    " Istalls pylint-mode
    Plugin 'klen/python-mode'
    " Configures pyLint-mode to run PyLint when saving
    let g:pymode_options_max_line_length = 70
    let g:pymode_lint_cwindow = 1
    let g:pymode_quickfix_maxheight = 10
    let g:pymode_quickfix_minheight = 10
    let g:pymode_lint_unmodified = 1
    let g:pymode_lint_checkers = ['pyflakes', 'mccabe', 'pylint']
    let g:pymode_lint_ignore = 'C,R'
    let g:pymode_syntax = 0
    let g:pymode_rope = 0
    " Installs Tagbar
    Plugin 'majutsushi/tagbar'
    " Use :TagBarToggle to turn on Tagbar
    
    " Installs NERDTree
    Plugin 'scrooloose/nerdtree'
    " Use :NERDTreeToggle to turn on NERDTree

    " Installs MatchTag
    Plugin 'gregsexton/MatchTag'
    " No toggle information available

    " Installs vim-behave syntax highlighting
    Plugin 'https://gitlab.com/mcepl/vim-behave.git'
    " No toggle information available
    
    " End of Vim plugins, All plugins should be added before this line.
    call vundle#end()           " required
    filetype plugin indent on   " required
    filetype indent on
    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append '!' to update
    " :PluginUpdate     - update plugins
    " :PluginSearch foo - searches for foo; append '!' to refresh local cache
    " :PluginClean      - confirms removal of unused plugs; append '!' to
    "                     auto-approve removal
    """""""""""""""""""""""""""""""""
    " End of Vundle plugin management
    """""""""""""""""""""""""""""""""
endif
syntax on
set hlsearch         " searched terms are highlighted
set backspace=2      " Allows the use of backspace on xterm windows
set background=light " Default background setting
set number nuw=6	 " line number columns, 6 charactes per row
set tabstop=4		 " size of a hard tabstop
set shiftwidth=4	 " size of an indent
set smarttab		 " make [tab] insert indents instead of tabs @ line start
set expandtab		 " always use spaces instead of tab characters
set ruler            " view status line
set mouse=a          " doesn't copy line numbers in visual mode
set copyindent       " copy the previous indentation on autoindenting
set ignorecase       " ignore case when searching
set smartcase        " ingnore case when searching with only lowercase
set incsearch        " show search matches as you type
set undolevels=1000  " up to 1000 undos stored
set cursorline       " highlight current line
set cursorcolumn     " highlight current column
" Useful Vim things from training manual
map <F5> :!python %  " Press F5 to run the current Python file
set printoptions=number:y

highlight PreProc ctermfg=White  " Improve syntax highlighting, PreProc
highlight LineNr ctermfg=White   " Line number color
highlight Comment ctermfg=Red    " Comment Color syntax highlightingl
highlight Constant ctermfg=2     " Green non-bold
highlight Type ctermfg=Magenta   " Type Color syntax highlighting
hi MatchParen cterm=none ctermbg=white ctermfg=blue " Improve paren match
hi CursorLine cterm=NONE ctermbg=123 ctermfg=white guibg=123 guifg=white
hi CursorColumn cterm=NONE ctermbg=123 ctermfg=white guibg=123 guifg=white
nnoremap <Leader>c :set cursorline! cursorcolumn!<CR> " Type: \c

"""""""""""""""""""""""""""""""
" Auto Commands
"""""""""""""""""""""""""""""""
autocmd FileType make setlocal noexpandtab
au BufNewFile,BufRead *.config set filetype=conf " config is a conf file
au BufNewFile,BufRead *.conf set filetype=conf " conf is a conf file
au BufNewFile,BufRead *.xml set noet ci pi sts=0 sw=4 ts=4 " Use tabs in xml files
"""""""""""""""""""""""""""""""
" PyLint
"""""""""""""""""""""""""""""""
" Make :make call PyLint
set makeprg=pylint\ --reports=n\ --output-format=parseable\ %:p
set errorformat=%f:%l:\ %m
" Use :cnext and :cprevious to page through results

""""""""""""""""""""""""""""""
" Custom Commands
""""""""""""""""""""""""""""""
if user==myname
    function! NewSection()
        let sectionFile=$STATIC."/new_section.txt"
        exe 'r' . sectionFile
    endfunction
    :command Section call NewSection()
endif
