#!/bin/bash
# Display line number ranges of a file to the terminal.
# Usage: $ pinch filename start-line end-line
# By Evan J. Coon

#####################################################################
# ERROR HANDLING
#####################################################################
function usage
{
    echo "pinch [-xvd] FILENAME START END"
    echo -e "\tx: cut lines from FILENAME"
    echo -e "\tv: verbose"
    echo -e "\td: disable logging"
}


function raise_error
{
    ERROR="[PINCH ERROR]: "
    local ERR="$1"
    if [ -n "$ERROR" ]; then
        echo -e "${ERROR}${ERR}"
        usage
        if [ -n "$2" ]; then
            exit $2
        else
            exit 1
        fi
    fi
}


function check_errors
{
    
    # Check that the number of arguments is 3
    if [ $# -lt 3 ]; then
        raise_error "Need three arguments: FILNAME START-line END-line"
    fi

    # Check that the file exists.
    if [ ! -f "${FILENAME}" ]; then
        raise_error "File: ${FILENAME} does not exist."
    fi

    # Check that start-line is not greater than end-line
    if [ "${START}" -gt "${END}" ]; then
        raise_error "START-line: ${START} is greater than END-line: ${END}"
    fi

    # Check that start-line is positive.
    if [ "${START}" -lt 0 ]; then
        raise_error "START-line: ${START} is less than 0."
    fi

    # Check that end-line is positive.
    if [ "${END}" -lt 0 ]; then
        raise_error "END-line: ${END} is less than 0."
    fi

    # Check that end-line is not greater than the number of lines in the file.
    if [ "${END}" -gt "${NUMOFLINES}" ]; then
        raise_error "END-line: ${END} is greater than number of lines in file: ${NUMOFLINES}"
    fi
}


#####################################################################
# SECONDARY FUNCTIONS
#####################################################################
function message
{
    # Print message if verbose mode is true
    local to_print="${1}"
    if ${VERBOSE}; then
        echo -e "${to_print}"
    fi
}


function pinch_log
{
    # Update Log
    if ${DISABLE_LOG}; then
        :
    else
        MESSAGE="PINCH LOG: ${HISTORY} : "
        LOG_OPTIONS=""
        if ${TO_CUT}; then
            LOG_OPTIONS=${LOG_OPTIONS}"x"
        fi
        if ${VERBOSE}; then
            LOG_OPTIONS=${LOG_OPTIONS}"v"
        fi
        if ${TO_CUT} || ${VERBOSE}; then
            LOG_OPTIONS=" -"${LOG_OPTIONS}" "
        else
            LOG_OPTIONS=" "
        fi

        LOG="${TODAY}: ${ABSPATH}${LOG_OPTIONS}${START} ${END}"

        if [ -d "${MYBASHLIB}" ]; then
            touch ${HISTORY}
        fi

        if [ -f "${HISTORY}" ]; then
            HISTORYLINES=$(wc -l < "${HISTORY}")
            if [ "${HISTORYLINES}" -ge "${HISTORYLIMIT}" ]; then
                cp ${HISTORY} ${HISTORY}.old
                echo ${LOG} > ${HISTORY}
                message "${MESSAGE}1 entry available"
            else
                echo ${LOG} >> ${HISTORY}
                HISTORYLINES=$((HISTORYLINES+1))
                message "${MESSAGE}${HISTORYLINES} entries available."
            fi
        fi
    fi
   
}


#####################################################################
# PRIMARY FUNCTIONS
#####################################################################
function cut
{
    local TEMP_CUT=${MYBASHLIB}/pinch_cut.temp
    local TEMP_RESULT=${MYBASHLIB}/pinch_result.temp

    sed "${START},${END}d" ${FILENAME} > ${TEMP_RESULT}
    pinch -d ${FILENAME} ${START} ${END} > ${TEMP_CUT}
    
    cp ${TEMP_RESULT} ${FILENAME}
    message "***CUT TEXT: TEMPORARILY STORED IN:\n\t${TEMP_CUT}***"
    cat ${TEMP_CUT}
    message "***END CUT TEXT. FOUND IN\n\t${TEMP_CUT}***"
    # Update the log
    pinch_log
}


function main
{
    # For larger files, this will run more quickly. If the distance from the
    # end of the file to the end-line is less than the distance from the
    # start of the file to the start-line, then start pinching from the
    # bottom as opposed to the top.
    if [ "${START}" -lt "${ENDDIFF}" ]; then
        < "${FILENAME}" head -n ${END} | tail -n +${START}
    else    
        < "${FILENAME}" tail -n +$(( START )) | head -n $(( END-START+1 ))
    fi

    # Update the log
    pinch_log
}


#####################################################################
# Execution
#####################################################################
    #################################################################
    # OPTIONS PARSING
    #################################################################
TO_CUT=false
VERBOSE=false
DISABLE_LOG=false
while getopts ":xvd" opt; do
    case ${opt} in
        x)
            TO_CUT=true
            ;;
        v)
            VERBOSE=true
            ;;
        d)
            DISABLE_LOG=true
            ;;
        \?)
            raise_error "Invalid option: -${OPTARG}"
            ;;
        :)
            raise_error "Option -${OPTARG} requires an argument."
            ;;
    esac
done
shift $((OPTIND-1))

    #####################################################################
    # MAIN VARIABLE DECLARATION
    #####################################################################
FILENAME=${1}
START=${2}
END=${3}

# This variable is automatically set when using sourcery
if [ -z ${MYBASHLIB} ] || [ ! -d ${MYBASHLIB} ]; then
    MYBASHLIB=~
fi

# The absolute path of FILENAME, used for logging
ABSPATH=$( readlink -fn ${FILENAME} )
# The location of the history of pinch actions used.
HISTORY="${MYBASHLIB}/pinch.history"
# The maximum number of lines stored in the HISTORY file
HISTORYLIMIT=100
# The number of lines of the given file
NUMOFLINES=$(wc -l < "${FILENAME}")
# Today's date, used for logging
TODAY=$(date)
# The distance from the end of the file to end-line
ENDDIFF=$(( NUMOFLINES - END ))

check_errors $@

if ${TO_CUT}; then
    cut
else
    main
fi

# Success
exit 0
